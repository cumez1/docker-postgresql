#!/usr/bin/with-contenv bash
# shellcheck shell=bash disable=SC1008
set -e

# shellcheck source=../postgresql/functions
source /etc/postgresql/functions


if [[ ! -f ${PG_DATA_DIR}/PG_VERSION ]]; then
	case ${REPLICATION_MODE,,} in
		standby|snapshot|backup)
			# Wait for master to be ready
			is_master_ready

			case ${REPLICATION_MODE,,} in
				standby)
					psql-standby
				;;

				snapshot)
					psql-snapshot
				;;

				backup)
					psql-backup
				;;
			esac
		;;

		*)
			log-init "initializing database..."
			PG_OLD_VERSION=$(find "${PG_HOME}"/[0-9][0-9].[0-9]/main -maxdepth 1 -name PG_VERSION 2>/dev/null | grep -v "${PG_VERSION}" | sort -r | head -n1 | cut -d'/' -f5)
			if [[ -n ${PG_OLD_VERSION} ]]; then
				log-init "migrating PostgreSQL ${PG_OLD_VERSION} data to ${PG_VERSION}..."

				# TODO: Diskspace check

				# protect the existing data from being altered by apt-get
				mv "${PG_HOME}/${PG_OLD_VERSION}" "${PG_HOME}/${PG_OLD_VERSION}.migrating"

				log-init "installing PostgreSQL ${PG_OLD_VERSION}..."
				if ! ( apk add --update --no-cache postgresql="${PG_OLD_VERSION}" postgresql-client="${PG_OLD_VERSION}" ) >/dev/null; then
					log-init "ERROR: Failed to install PostgreSQL ${PG_OLD_VERSION}. Restoring data..."

					# First move the old data back
					rm -rf "${PG_HOME}/${PG_OLD_VERSION:?}"
					mv "${PG_HOME}/${PG_OLD_VERSION}.migrating" "${PG_HOME}/${PG_OLD_VERSION}"
					log-init "data Restore Succesful. Exiting..."
					exit 10
				fi

				# we're ready to migrate, move back the old data and remove the trap
				rm -rf "${PG_HOME}/${PG_OLD_VERSION:?}"
				mv "${PG_HOME}/${PG_OLD_VERSION}.migrating" "${PG_HOME}/${PG_OLD_VERSION}"
			fi

			if [[ -n ${PG_PASS} ]]; then
				echo "${PG_PASS}" > /tmp/pwfile
			fi

			# build initdb command params
			declare -a INITDB_PARAMS=()
			INITDB_PARAMS+=(--pgdata="${PG_DATA_DIR}")
			INITDB_PARAMS+=(--username="${PG_USER}")
			INITDB_PARAMS+=(--locale="${LANG}")
			INITDB_PARAMS+=(--encoding=unicode)
			INITDB_PARAMS+=(--auth=trust ${PG_PASS:+--pwfile=/tmp/pwfile})

			# Configuration of wal segment size if only available from version 11+
			if (( "${PG_VERSION_MAJOR}" >= 11 )); then
				INITDB_PARAMS+=(--wal-segsize="${PG_JOURNAL_WAL_SEGMENT_SIZE}")
			fi

			s6-setuidgid abc initdb "${INITDB_PARAMS[@]}" >/dev/null

			if [[ -n ${PG_OLD_VERSION} ]]; then
				PG_OLD_DATADIR=${PG_HOME}/${PG_OLD_VERSION}/main
				PG_OLD_CONF=${PG_OLD_DATADIR}/postgresql.conf
				PG_OLD_HBA_CONF=${PG_OLD_DATADIR}/pg_hba.conf
				PG_OLD_IDENT_CONF=${PG_OLD_DATADIR}/pg_ident.conf

				# Build pg_upgrade command params
				declare -a PG_UPGRADE_PARAMS=()
				PG_UPGRADE_PARAMS+=(--username="${PG_USER}")
				PG_UPGRADE_PARAMS+=(--old-datadir="${PG_OLD_DATADIR}")
				PG_UPGRADE_PARAMS+=(--new-datadir="${PG_DATA_DIR}")
				PG_UPGRADE_PARAMS+=(--old-options="-c config_file=${PG_OLD_CONF} --hba_file=${PG_OLD_HBA_CONF} --ident_file=${PG_OLD_IDENT_CONF}")
				PG_UPGRADE_PARAMS+=(--new-options="-c config_file=${PG_CONF} --hba_file=${PG_HBA_CONF} --ident_file=${PG_IDENT_CONF}")

				echo -n "  migration in progress. Please be patient..."
				s6-setuidgid abc pg_upgrade "${PG_UPGRADE_PARAMS[@]}" >/dev/null
				echo " [DONE]"
			fi
		;;
	esac

	# Configure filesystem journal
	# Change DSM from `posix' to `sysv' if we are inside an lx-brand container
	if [ "$(uname -v)" == "BrandZ virtual linux" ]; then
		set_postgresql_param "dynamic_shared_memory_type" "sysv"
	fi
fi

# configure path to data_directory
set_postgresql_param "data_directory" "${PG_DATA_DIR}"

# EOF