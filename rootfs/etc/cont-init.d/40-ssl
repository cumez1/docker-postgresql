#!/usr/bin/with-contenv bash
# shellcheck shell=bash disable=SC1008
set -e

# shellcheck source=../postgresql/functions
source /etc/postgresql/functions


if is_enabled "${PG_SSL}"; then
	log-init "SSL/TLS: Enabled"

	if [ ! -f "${PG_CERTS_DIR}/server.crt" ]; then
		log-init "ERROR: SSL/TLS is enabled certificate not found [${PG_CERTS_DIR}/server.crt]"
		exit 41
	else
		if [ "$(stat -c "%a" "${PG_CERTS_DIR}/server.crt")" != "644" ]; then
			log-init "invalid permissions for ${PG_CERTS_DIR}/server.crt; expect: 644"
			exit 42
		fi
	fi

	if [ ! -f "${PG_CERTS_DIR}/server.key" ]; then
		log-init "ERROR: SSL/TLS is enabled certificate key not found [${PG_CERTS_DIR}/server.key]"
		exit 43
	else
	  if [ "$(stat -c "%a" "${PG_CERTS_DIR}/server.key")" != "640" ]; then
			log-init "invalid permissions for ${PG_CERTS_DIR}/server.key; expect: 640"
			exit 44
		fi
	fi

	if [[ -f ${PG_CERTS_DIR}/server.crt && -f ${PG_CERTS_DIR}/server.key ]]; then
		set_postgresql_param "ssl_cert_file" "${PG_CERTS_DIR}/server.crt"
		set_postgresql_param "ssl_key_file" "${PG_CERTS_DIR}/server.key"

		# TODO: UPDATE with switch
		# Check for CA
		# Either file:
		#  root.crt
		#  cacert.pem
		if [[ -f ${PG_CERTS_DIR}/ca.crt ]]; then
			if [ "$(stat -c "%a" "${PG_CERTS_DIR}/ca.crt")" != "644" ]; then
				log-init "invalid permissions for ${PG_CERTS_DIR}/ca.key; expect: 644"
				exit 45
			fi
			set_postgresql_param "ssl_ca_file" "${PG_CERTS_DIR}/ca.crt"
		fi
	fi

	# Enabled SSL/TLS
	set_postgresql_param "ssl" "on"
else
	# Disable SSl/TLS
	set_postgresql_param "ssl" "off"
fi

# EOF