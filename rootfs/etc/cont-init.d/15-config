#!/usr/bin/with-contenv bash
set -e

################################################################################
# shellcheck source=../postgresql/functions
source /etc/postgresql/functions


################################################################################
# Create data Home directory
if [ ! -d "${PG_DATA_DIR}" ]; then
	log-init "creating directory::data [${PG_DATA_DIR}]"
	mkdir -p "${PG_DATA_DIR}"
else
	log-init "directory::data exists [${PG_DATA_DIR}]"
fi

if [ -d "${PG_DATA_DIR}" ]; then
	find "${PG_DATA_DIR}" -type f -exec chmod 0600 {} \;
	find "${PG_DATA_DIR}" -type d -exec chmod 0700 {} \;
fi

# Set permissions on PG_HOME
log-init "setting permissions::home"
chown -R abc:abc "${PG_HOME}"


################################################################################
# Create log directory
if [ ! -d "${PG_LOG_DIR}" ]; then
	log-init "creating directory::log [${PG_LOG_DIR}]"
	mkdir -p "${PG_LOG_DIR}"
else
	log-init "directory::log exists [${PG_LOG_DIR}]"
fi

# Set permissions on PG_LOGDIR
log-init "setting permissions::log"
chmod -R 1775 "${PG_LOG_DIR}"
chown -R abc:abc "${PG_LOG_DIR}"


################################################################################
# Create Run Directory
if [ ! -d "${PG_RUN_DIR}" ]; then
	log-init "creating directory::run [${PG_RUN_DIR}]"
	mkdir -p "${PG_RUN_DIR}" "${PG_RUN_DIR}/${PG_VERSION}-main.pg_stat_tmp"
else
	log-init "directory::run exists [${PG_RUN_DIR}]"
fi

if [ ! -L /run/postgresql/postgresql ]; then
	ln -s "${PG_RUN_DIR}" /run/postgresql
fi

# Set Permissions on PG_RUN_DIR
log-init "setting permissions::run"
chmod -R 0755 "${PG_RUN_DIR}"
chmod g+s "${PG_RUN_DIR}"
chown -R abc:abc "${PG_RUN_DIR}"


################################################################################
# Certificates
if [ ! -d "${PG_CERTS_DIR}" ]; then
	log-init "creating directory::certs [${PG_CERTS_DIR}]"
	mkdir -p "${PG_CERTS_DIR}"
else
	log-init "directory::certs exists [${PG_CERTS_DIR}]"
fi


################################################################################
# Verify SSL/TLS
if is_enabled "${PG_SSL}"; then
	log-init "SSL/TLS: Enabled"

	if [ ! -f "${PG_CERTS_DIR}/server.crt" ]; then
		log-init "ERROR: SSL/TLS is enabled certificate not found [${PG_CERTS_DIR}/server.crt]"
		exit 41
	else
		if [ "$(stat -c "%a" "${PG_CERTS_DIR}/server.crt")" != "644" ]; then
			log-init "invalid permissions for ${PG_CERTS_DIR}/server.crt; expect: 644"
			exit 42
		fi
	fi

	if [ ! -f "${PG_CERTS_DIR}/server.key" ]; then
		log-init "ERROR: SSL/TLS is enabled certificate key not found [${PG_CERTS_DIR}/server.key]"
		exit 43
	else
		if [ "$(stat -c "%a" "${PG_CERTS_DIR}/server.key")" != "640" ]; then
			log-init "invalid permissions for ${PG_CERTS_DIR}/server.key; expect: 640"
			exit 44
		fi
	fi
fi

# set permissions on PG_CERTS_DIR
chown abc:abc "${PG_CERTS_DIR}"

if [[ ! -f ${PG_DATA_DIR}/PG_VERSION ]]; then
	case ${REPLICATION_MODE,,} in
		backup)
			# NOOP
		;;

		*)
			################################################################################
			# Create Database init.d for custom load scripts
			if [ ! -d "${PG_INIT_DB}" ]; then
				log-init "creating directory::init.db.d [${PG_INIT_DB}]"
				mkdir -p "${PG_INIT_DB}"
			fi

			# Set permissions on PG_INIT_DB
			log-init "setting permissions::init.db.d"
			chown -R abc:abc "${PG_INIT_DB}"


			################################################################################
			# validate Configuration
			if [ "$PG_PASS" == "postgres" ]; then
				log-init "WARNING: postgres user password still set to default; only use this for test/dev environments"
			fi

			if [[ -z ${DB_USER} ]]; then
				log-init "ERROR: required variable DB_USER not set"
				exit 15
			fi

			if [[ -z ${DB_PASS} ]]; then
				log-init "ERROR: required variable DB_PASS not set"
				exit 16
			fi

			if [[ -z ${DB_NAME} ]]; then
				log-init "ERROR: required variable DB_NAME not set"
				exit 17
			fi
		;;
	esac
fi

if [[ ! -f ${PG_DATA_DIR}/PG_VERSION ]]; then
	case ${REPLICATION_MODE,,} in
		slave|snapshot|backup)
			if [[ -z $REPLICATION_HOST ]]; then
				log-init "ERROR: REPLICATION_MODE=${REPLICATION_MODE^^}; required variable REPLICATION_HOST not set"
				exit 18
			fi

			if [[ -z $REPLICATION_USER ]]; then
				log-init "ERROR: REPLICATION_MODE=${REPLICATION_MODE^^}; required variable REPLICATION_USER not set"
				exit 19
			fi

			if [[ -z $REPLICATION_PASS ]]; then
				echo "ERROR: REPLICATION_MODE=${REPLICATION_MODE^^}; required variable REPLICATION_PASS not set"
				exit 20
			fi
		;;
	esac
fi

# EOF